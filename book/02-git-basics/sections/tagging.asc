[[_git_tagging]]
=== Etiketleme (tagging)

(((tags)))
Çoğu VCS gibi Git de bir reponun geçmişindeki belirli noktaları "önemli" şeklinde etiketleme yeteneğine sahiptir.
Genellikle geliştiriciler bu işlevi her bir sürümü (`v1.0`, `v2.0` vb.) işaretlemek için kullanır.
Bu bölümde mevcut etiketlerin nasıl listeleneceğini, etiketlerin nasıl oluşturulacağını ve silineceğini ve farklı etiket türlerinin neler olduğunu öğreneceksiniz.

==== Etiketlerinizi Listeleme (listing)

Git'te mevcut etiketleri listelemek oldukça basittir.
Sadece `git tag` (isterseniz `-l` veya `--list` seçenekleriyle) yazmanız yeterlidir:(((git commands, tag)))

[source,console]
----
$ git tag
v1.0
v2.0
----

Bu komut, etiketleri alfabetik sıraya göre listeler ama görüntülenme sırasının aslında bir önemi yoktur.

Ayrıca belli kalıplarla eşleşen etiketleri de arayabilirsiniz.
Örneğin Git kaynak reposu 500'den fazla etiket içerir.
Eğer sadece 1.8.5 serisine bakmak istiyorsanız şunu çalıştırabilirsiniz:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

[NOT]
.Joker (wildcard) etiket karakterlerini listelemek `-l` veya `--list` gerektirir
====
Eğer tüm etiketlerin toplu bir listesini istiyorsanız  `git tag` komutunu çalıştırabilirsiniz. Git bu durumda sizin bir liste istediğinizi varsayar ve size bu listeyi verir. Böyle bir durumda `-l` veya `--list` kullanımı isteğe bağlıdır.

Ancak etiket adlarıyla eşleştirmek üzere bir karakter deseni (joker) yazacaksanız, `-l` veya `--list` kullanımı zorunludur.
====

==== Etiket Oluşturma

Git iki çeşit etiketi destekler: _lightweight_ (hafif) ve _annotated_ (açıklamalı).

Hafif bir etiket, değişmeyen bir Git dalı gibidir; yalnızca belirli bir "commit"in işaretçisidir.

Ancak açıklamalı etiketler Git veritabanında tam nesneler olarak depolanır.
Bunlar sağlamalı (checksummed) verilerdir. Etiketleyicinin adını, e-postasını ve etiketleme tarihini içerir; etiketleme mesajınız yer alır ve GNU Privacy Guard (GPG) ile imzalanıp, doğrulanabilir.
Tüm bu bilgilere sahip olabilmeniz için genellikle açıklamalı etiketler oluşturmanız önerilir; ancak geçici bir etiket istiyorsanız veya herhangi bir nedenle diğer bilgileri saklamak istemiyorsanız, hafif etiketler de mevcuttur.

[[_annotated_tags]]
==== Açıklamalı Etiketler (annotated tags)

(((tags, annotated)))
Git'te açıklamalı bir etiket oluşturmak basittir.
En kolay yol, `tag` komutunu çalıştırdığınızda `-a` bayrağı da belirtmektir:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

`-m` bayrağı etiketle birlikte saklanan bir etiketleme mesajı belirtir.
Eğer bu etiket için bir mesaj belirtmezseniz Git, mesajı yazabilmeniz için otomatik olarak düzenleyicinizi başlatır.

Etiket verilerini `git show` komutunu kullanarak etiketlediğiniz "commit"le birlikte görebilirsiniz:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Bu "commit" bilgisini göstermeden önce etiketleme bilgisini, etiketleme tarihini ve açıklama mesajını gösterir.

==== Hafif Etiketler (lightweight tags)

(((tags, lightweight)))
"commit"leri etiketlemenin başka bir yolu da hafif etiketler kullanmaktır.
Bu metodda "commit" sağlaması dışında hiçbir veri saklanmaz.
Hafif etiket oluşturmak için `-a`, `-s` veya `-m` seçeneklerinden hiçbirini kullanmaksızın sadece bir etiket adı yazarsınız:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

Bu sefer etiket üzerinde `git show` komutunu çalıştırırsanız ekstra etiket bilgilerini göremezsiniz.(((git commands, show)))
Komut sadece "commit"i gösterir:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Sonradan Etiketleme

"commit"leri geçtikten sonra da etiketleyebilirsiniz.
"commit" geçmişinizin şöyle göründüğünü varsayalım:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Şimdi, projeyi ``updated rakefile`` "commit"inde bulunurken "v1.2"ye etiketlemeyi unuttuğunuzu varsayalım.
Bunu sonradan da ekleyebilirsiniz.
Bu "commit"i etiketlemek için, komutun sonunda "commit" sağlamasının (checksum) tamamını veya bir kısmını belirtirsiniz:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

"commit"i etiketlediğinizi görebilirsiniz:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Etiketleri Paylaşma

Varsayılan olarak `git push` komutu, etiketleri uzak sunuculara aktarmaz.(((git commands, push)))
Etiketleri oluşturduktan sonra açıkça paylaşıma açık bir sunucuya (shared server) göndermeniz gerekecektir.
Bu süreç tıpkı uzak dalları paylaşmaya benzer: `git push origin <tagname>` komutunu çalıştırabilirsiniz (tagname: etiket adı).

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Aynı anda göndermek istediğiniz çok sayıda etiketiniz varsa, `git push` komutunun yerine `--tags` seçeneğini de kullanabilirsiniz.
Bu, tüm etiketlerinizi, halihazırda orada olmayan uzak sunucuya aktaracaktır.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Artık başka biri reponuzu klonladığında veya reponuzdan bilgi aldığında tüm etiketlerinizi de alacaktır.

[NOT]
.`git push` her iki türde etiketi de gönderir
====
Etiketleri `git push <remote> --tags` kullanarak göndermek, hafif ve açıklamalı etiketler arasında bir ayrım yapmaz. Gönderme (push) işlemi için tür seçmenize olanak tanıyan basit bir seçenek veya bayrak yoktur.
====

==== Etiketleri Silme (delete)

Yerel reponuzdaki bir etiketi silmek için `git tag -d <tagname>` komutunu kullanabilirsiniz (tagname: etiket adı).
Örneğin yukarıdaki hafif etiketimizi şu şekilde kaldırabiliriz:


[source,console]
----
$ git tag -d v1.4-lw
Deleted tag 'v1.4-lw' (was e7d5add)
----

Bunun, etiketi herhangi bir uzak sunucudan kaldırmadığını unutmayın.
Uzak sunucudan etiket silmenin iki yaygın çeşidi vardır.

İlk yöntem `git push <remote> :refs/tags/<tagname>` komutudur (remote: uzak sunucu adı, tagname: etiket adı):

[source,console]
----
$ git push origin :refs/tags/v1.4-lw
To /git@github.com:schacon/simplegit.git
 - [deleted]         v1.4-lw
----

Aslında yaptığımız şey: uzak sunucudaki (remote) etiket adının (tagname) üstüne boş (null) bir değer yazmaktır (":" dan önceki boşluğa dikkat edin). Böylece eski etiket silinecektir.

Uzak etiketi silmenin ikinci (ve daha sezgisel) yolu ise `--delete <tagname>` kullanmaktır (tagname: etiket adı):

[source,console]
----
$ git push origin --delete <tagname>
----

==== Etiketleri kontrol etme

Bir etiketin işaret ettiği sürümleri görüntülemek istiyorsanız, bu etiketi `git checkout` komutuyla kontrol edebilirsiniz. Ancak bunu yapmak reponuzu ``detached HEAD`` (ayrık uç) durumuna sokar ve bu da bazı olumsuz yan etkilere neden olur:

[source,console]
----
$ git checkout 2.0.0
Note: checking out '2.0.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch>

HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final

$ git checkout 2.0-beta-0.1
Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final
HEAD is now at df3f601... add atlas.json and cover image
----

Normalde her bir dalda bir uç (HEAD) bulunur ve bu uç en son "commit"e sabitlenmiştir. 
``detached HEAD`` durumundayken bu uç en son "commit" yerine etikete sabitlendiğinden bir "commit" oluştursanız bile "commit"iniz hiçbir dala ait olmayacağı için kesin "commit" karması (hash) dışında erişilemez olacaktır.
Bu nedenle, değişiklik yapmanız gerekiyorsa (mesela eski bir sürümdeki bir hatayı düzelttiniz) yeni bir dal oluşturmanız gerekecektir:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Bunu yapıp bir "commit"te bulunursanız, "version2" dalınız, yeni değişikliklerinizle ilerleyeceği için "v2.0.0" etiketinizden biraz farklı olacaktır, bu yüzden dikkatli olun.
