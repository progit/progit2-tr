[[_getting_a_repo]]
=== Git Deposu Edinmek

Bir Git deposunu genellikle iki şekilde edinirsiniz:

1. Şu anda sürüm kontrolü altında olmayan bir yerel dizini alıp bir Git deposuna dönüştürebilirsiniz, veya
2. Başka bir yerden var olan bir Git deposunu _klonlayabilirsiniz_.

Her iki durumda da, yerel makinenizde çalışmaya hazır bir Git deposu elde edersiniz.

==== Mevcut Bir Dizinde Yeni Bir Depo Başlatma

Sürüm kontrolü altında olmayan bir proje dizininiz varsa ve onu Git ile kontrol etmeye başlamak istiyorsanız, öncelikle projenin dizinine gitmeniz gerekiyor.
Bunu daha önce yapmadıysanız, hangi sistemde çalıştığınıza bağlı olarak biraz farklı görünecektir:

for Linux:
[source,console]
----
$ cd /home/user/my_project
----
for macOS:
[source,console]
----
$ cd /Users/user/my_project
----
for Windows:
[source,console]
----
$ cd /c/user/my_project
----

and type:

[source,console]
----
$ git init
----

Bu, tüm gerekli depo dosyalarını içeren bir Git deposu iskeleti olan `.git` adlı yeni bir alt dizin oluşturur.
Bu noktada, projenizde henüz takip edilen hiçbir şey yok.
(`.git` dizininde oluşturduğunuz dosyaların tam olarak neler olduğu hakkında daha fazla bilgi için <<ch10-git-internals#ch10-git-internals>> bölümüne bakın.)(((git commands, init)))

Eğer var olan dosyaları sürüm kontrolü altına almak istiyorsanız (boş bir dizin yerine), muhtemelen bu dosyaları takip etmeye başlamalı ve ilk commit işlemini yapmalısınız.
Bu işlemi, takip etmek istediğiniz dosyaları belirten birkaç `git add` komutu ve ardından bir `git commit` ile yapabilirsiniz:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Bu komutların ne yaptığını birazdan açıklayacağız.
Bu noktada, takip edilen dosyaları ve ilk commit işlemini içeren bir Git deposuna sahipsiniz.

[[_git_cloning]]
==== Varolan Bir Depoyu Klonlama

Bir Git deposunun kopyasını edinmek isterseniz -örneğin, katkıda bulunmak istediğiniz bir proje için- ihtiyacınız olan komut `git clone`'dır.
Eğer Subversion gibi diğer VKS sistemlerini biliyorsanız, komutun "checkout" değil de "clone" olduğunu fark edeceksiniz.
Bu önemli bir ayrımdır -- Git sadece çalışma kopyası almak yerine, sunucunun sahip olduğu neredeyse tüm verilerin tam bir kopyasını alır.
Projenin tarihi için her dosyanın her sürümü, `git clone` çalıştırıldığında varsayılan olarak çekilir.
Aslında, sunucu diskiniz bozulursa, sunucuyu klonlandığı zamanki durumuna geri getirmek için herhangi bir istemcideki klonlardan neredeyse herhangi birini kullanabilirsiniz (bazı sunucu tarafı bağlantıları ve benzerlerini kaybedebilirsiniz, ancak tüm sürümlendirilmiş veriler orada olacaktır -- daha fazla ayrıntı için <<ch04-git-on-the-server#_getting_git_on_a_server>> bölümüne bakın).

Bir depoyu `git clone <url>` ile klonlayabilirsiniz.(((git commands, clone)))
Örneğin, `libgit2` adlı Git linkable kütüphanesini klonlamak istiyorsanız, bunu şu şekilde yapabilirsiniz:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Bu, `libgit2` adında bir dizin oluşturur, içinde bir `.git` dizini başlatır, bu depo için tüm verileri çeker ve en son sürümün çalışma kopyasını kontrol eder.
Yeni oluşturulan `libgit2` dizinine girerseniz, üzerinde çalışılmaya veya kullanılmaya hazır proje dosyalarını orada görürsünüz.

Depoyu `libgit2` dışında bir dizine klonlamak istiyorsanız, yeni dizin adını ek bir argüman olarak belirtebilirsiniz:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Bu komut bir öncekiyle aynı şeyi yapar, ancak hedef dizin `mylibgit` olarak adlandırılır.

Git'in kullanabileceğiniz bir dizi farklı transfer protokolü vardır.
Önceki örnek `https://` protokolünü kullanmaktadır, ancak SSH transfer protokolünü kullanan `git://` veya `user@server:path/to/repo.git` protokollerini de görebilirsiniz.
<<ch04-git-on-the-server#_getting_git_on_a_server>>, sunucunun Git deponuza erişmek için yapılandırabileceği tüm mevcut seçenekleri ve her birinin artılarını ve eksilerini tanıtacaktır.
