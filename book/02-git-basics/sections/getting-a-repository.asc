[[_getting_a_repo]]
=== Bir Git Deposu Edinme

Genellikle 2 yoldan biriyle Git deposu elde edersiniz.

1. Şu anda sürüm denetimi altında olmayan yerel bir dizini alabilir, ve bunu bir Git deposuna çevirebilirsiniz, veya
2. Başka yerden mevcut Git deposunu _kopyala_yabilirsiniz.

Her iki durum da, iş için hazır, yerel makinenizde Git deposu ile sonuçlanır.

==== Varolan Dizinde bir Depoyu Başlatma

Eğer şu anda sürüm denetimi altında olmayan bir proje dizininiz varsa ve bunu Git ile idare etmeye başlamak istiyorsanız, önce o projenin dizinine gitmeniz gerekir.
Eğer bunu hiç yapmadıysanız, çalıştığınız sisteme bağlı olarak biraz farklı görünüyor:

Linux için:
[source,console]
----
$ cd /home/user/my_project
----
Mac için:
[source,console]
----
$ cd /Users/user/my_project
----
Windows için:
[source,console]
----
$ cd /c/user/my_project
----

ve yazın:

[source,console]
----
$ git init
----

Bu, gerekli depo dosyalarınızın tümünü içeren, `.git` adında yeni bir alt dizin yaratır -- Git depo iskeleti.
Bu noktada, projenizdeki hiçbir şey henüz izlenmemektedir.
(Az önce oluşturduğunuz `.git` dizininde tam olarak hangi dosyaların kapsandığı hakkında daha fazla bilgi için <<ch10-git-internals#ch10-git-internals>>'e bakın.)(((git commands, init)))

Eğer varolan dosyaların sürüm kontrolünü başlatmak (boş bir dizine karşılık olarak) istiyorsanız, muhtemelen bu dosyaları takibe başlamalı ve başlangıç önerisinde bulunmalısınız.
Bunu `git commit` tarafından izlenen, takip etmek istediğiniz dosyaları belirten birkaç `git add` komutuyla başarabilirsiniz:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Sadece bir dakika içinde bu komutların ne yaptığını inceleyeceğiz.
Bu noktada, izlenen dosyalar ve başlangıç önerisi olan bir Git deposuna sahipsiniz.

[[_git_cloning]]
==== Varolan Depoyu Kopyalama

Eğer varolan bir Git deposunun kopyasını almak istiyorsanız -- örneğin, katkıda bulunmak istediğiniz bir proje -- ihtiyacınız olan komut `git clone` dur.
Eğer Subversion gibi diğer VCS sistemlerini aşinaysanız, komutun "kontrol" değil "klon" olduğunu farkedeceksiniz.
Bu önemli bir fark -- sadece bir çalışma kopyasını almak yerine, Git sunucunun sahip olduğu neredeyse tüm verilerin tam kopyasını alır.
Projenin geçmişi için her dosyanın her bir sürümü `git clone` 'u çalıştırdığınızda, varsayılan olarak aşağı çekilir.
Aslında, eğer sunucu diskiniz bozulursa, çoğu durumda sunucuyu kopyalanırken bulunduğu duruma geri getirmek için herhangi bir istemcide çoğaltılanların herhangi birini kullanabilirsiniz. (bazı sunucu tarafı kancalarını ve benzerlerini kaybedebilirsiniz, ancak sürümlenmiş verinin tamamı orada olmalıdır -- daha fazla detay için göz atın <<ch04-git-on-the-server#_getting_git_on_a_server>> ).

`git clone <url>`.(((git commands, clone))) ile bir depo kopyalayın.
Örneğin, Eğer `libgit2` adlı Git bağlantılı kitaplığı çoğaltmak isterseniz, Bunu şöyle yapabilirsiniz:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Bu `libgit2` isimli bir dizin yaratır, içindeki bir `.git` dizinini başlatır, bu depo için tüm verileri aşağı çeker ve en son sürümün çalışan bir kopyasını denetler.
Eğer az önce oluşturduğunuz yeni `libgit2` dizini içine giderseniz, üzerinde çalışılmaya veya kullanılmaya hazır, proje dosyalarını orada göreceksiniz.

Eğer `libgit2` dışında başka adlı bir dizin içine depoyu kopyalamak isterseniz, bunu bir sonraki komut satırı seçeneği olarak belirleyebilirsiniz:
[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Bu komut önceki komut gibi aynı şeydir, ancak hedef dizine `mylibgit` denir.

Git kullanabileceğiniz birkaç farklı aktarım protokolüne sahiptir.
Önceki örnek `https: //` protokolünü kullanır, fakat ayrıca SSH aktarım protokolünü kullanan `git://` veya `user@server:path/to/repo.git` 'e bakabilirsiniz.
<<ch04-git-on-the-server#_getting_git_on_a_server>> her bir artıları ve eksileri ile Git deponuza erişmek için sunucunun kurabileceği uygun seçeneklerin hepsini gösterecektir.
