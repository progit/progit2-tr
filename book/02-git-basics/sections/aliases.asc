[[_git_aliases]]
=== Komut Kısayolu (Alias) Ayarlama

(((aliases)))
Temel Git ile ilgili bu bölümü bitirmeden önce Git deneyiminizi daha basit, daha kolay ve daha tanıdık hale getirebilecek küçük bir ipucu vereceğiz: komut kısayolları.
Bu kitapta kısayol (alias) konusuna girmeyeceğiz veya ilerleyen bölümlerde bunları kullandığınızı varsaymayacağız, ancak bunları nasıl kullanacağınızı bilmenizde yine de fayda var.

Eğer komutunuzun tamamını yazmazsanız, Git bir kısaltma yaptığınızı otomatik olarak anlayamaz.
Git komutlarının tamamını uzun uzun yazmak istemiyorsanız, `git config` komutunu kullanarak, her komut için kolayca bir kısayol ayarlayabilirsiniz.(((git commands, config)))
Aşağıda kısayol olarak isteyebileceğiniz birkaç örnek verilmiştir:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

İlk örnekte `git commit` yerine "git ci" komutunu ayarlıyorsunuz. Artık `git ci` yazarsanız Git bunu `git commit` olarak düşünecektir.
Git'i kullanmaya devam ettikçe muhtemelen diğer komutları da sıklıkla kullanacaksınız; yeni kısayollar oluşturmaktan çekinmeyin.

Bu tekniği aynı zamanda Git'te mevcut olmayan, ama olması gerektiğini düşündüğünüz komutların oluşturulmasında da kullanabilirsiniz.
Örneğin, bir dosyayı "stage"den kaldırırken karşılaştığınız "kullanılabilirlik" sorununu düzeltmek için Git'e kendi "stage"den kaldırma komutunuzu ekleyebilirsiniz:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Bu yeni tanımlanan komut, aşağıdaki iki komutun işini tek başına yapacaktır.

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Böylesi daha temiz görünüyor.
Bir `last` komutu eklemek de çok yaygındır. Şunun gibi:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Böylelikle son işlemi kolayca görebilirsiniz:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Gördüğünüz gibi Git, yeni komutu her neyin kısayolu olarak ayarlarsanız onunla değiştirir.
Ancak Git alt komutları yerine harici bir komut da çalıştırmak isteyebilirsiniz.
Bu durumda komuta `!` karakteriyle başlamalısınız.
Eğer Git'te çalışan kendi komutlarınızı yazmak istiyorsanız bu epey kullanışlıdır.
Hadi `git visual` komutunu çalıştıracak `gitk` kısayolunu atamayı gösterelim:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
