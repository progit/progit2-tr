[[_git_aliases]]
=== Git Rumuzları

(((aliases)))
Git temelleri ile ilgili bu bölümü bitirmeden önce Git deneyiminizi daha basit, daha kolay ve daha tanıdık hale getirebilecek küçük bir ipucu var: rumuzlar.
Kitabın ilerleyen bölümlerinde rumuzlar konusuna değinmeyeceğiz yada rumuzları kullandığınızı varsaymayacağız.

Git komutlarını eksik yada kısmen yazarsanız buradan çıkarım yapılmaz. Git komutlarını tüm metni yazmak istemiyorsanız,  `git config` i kullanarak kolayca rumuz atayabilirsiniz. 
Aşağıdaki birkaç rumuz örneğini inceleyebilirsiniz: 

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Örnekte gösterildiği gibi `git commit` yazmak yerine `git ci` yazmanız yeterli olacaktır. 
Git'i kullanmaya devam ettikçe muhtemelen diğer komutları da sıklıkla kullanacaksınız; yeni rumuzlar oluşturmaktan ve kullanmaktan çekinmeyin. 

Bu teknik aynı zamanda olması gerektiğini düşündüğünüz komutların oluşturulmasında da çok yararlı olabilir.
Örneğin bir dosyanın kullanılabilirlik sorununu düzeltmek için karşılaştığınız `unstage` komutu yerine kendi Git rumuzunuzu oluşturabilirsiniz.

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Böylelikle aşağıdaki iki komutun yerine geçecek bir rumuz oluşturmuş olursunuz. 

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Bu biraz daha temiz ve sade görünüyor. 
Bunun gibi birde `last` komutu eklemek yaygındır :

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Bu şekilde son işlemi kolaylıkla görebilirsiniz:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Görüldüğü gibi, Git'te istediğiniz komutu bir rumuz vererek kolayca değiştirebilirsiniz. 
Ancak Git alt komutu yerine harici bir komutta çalıştırmak isteyebilirsiniz.
Bu durumda komutunuza `!` karakteri ile başlamanız gerekir.
Git deposuyla çalışan kendi araçlarınızı yazıyorsanız bu kullanışlıdır.
Şu örnekle bunu gösterebiliriz. `git visual` yerine `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
