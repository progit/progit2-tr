=== Değişikliklerin Repoya Kaydedilmesi

Bu noktada, yerel makinenizde bir "bona fide" (iyi niyetli) Git reposuna ve önünüzde tüm dosyaları kullanımda olan veya çalışan bir kopyasına sahip olmalısınız.
Doğal olarak, proje kaydetmek istediğiniz duruma her ulaştığında değişiklik yapmaya ve bu değişikliklerin anlık görüntülerini reponuza kaydetmeye başlamak isteyeceksiniz.

Çalışma dizininizdeki her dosyanın iki durumdan birinde olabileceğini unutmayın: "tracked" (izlenen / takip edilen) veya "untracked" (izlenmeyen / takip edilmeyen).
İzlenen dosyalar, son anlık görüntüdeki (snapshot) dosyalardır: bunlar "modified" (değiştirilmiş), "unmodified" (değiştirilmemiş) veya "staged" (hazırlanmış) olabilirler.
Kısacası izlenen dosyalar Git'in haberdar olduğu ve değişikliklerini takip ettiği dosyalardır.

İzlenmeyen dosyalar ise diğer her şeydir; çalışma dizininizdeki, son anlık görüntünüzde olmayan ve hazırlama alanınızda (staging area) olmayan dosyalardır.
Bir repoyu ilk kez klonladığınızda, tüm dosyalarınız izlenecek ve "unmodified" (değiştirilmemiş) olarak işaretlenmiş olacaktır. Çünkü Git onları daha yeni teslim aldı ve siz henüz hiçbir değişiklik yapmadınız.

Siz dosyaları düzenlerken Git onları "modified" (değiştirilmiş) olarak görür, çünkü son Git işleminizden (commit, clone, push, vs) sonra bu dosyalarda değişiklik yaptınız.
Çalışırken, bu değiştirilmiş dosyaları seçerek "stage"e alırsınız (commit için hazırlarsınız) ve ardından "stage"e alınmış tüm bu değişiklikleri "commit" edersiniz. Ve döngü her değişiklikten sonra tekrarlanır.

.Dosyalarınızın durumunun yaşam döngüsü.
image::images/lifecycle.png[The lifecycle of the status of your files.]

[[_checking_status]]
==== Dosyalarınızın Durumunu Kontrol Etme

Hangi dosyaların hangi durumda olduğunu görmek için `git status` komutu kullanırız. (((git commands, status)))
Bu komutu bir projeyi klonladıktan hemen sonra çalıştırırsanız şöyle bir şey görmelisiniz:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

Bu, temiz bir çalışma dizininiz olduğu anlamına gelir; bir başka deyişle, izlenen dosyalarınızın hiçbirinde henüz bir değişiklik yok.
Git ayrıca izlenmeyen (untracked) dosyaları görmez; aksi halde onlar da burada listelenirdi.
Son olarak bu komut size hangi dalda olduğunuzu söyler ve sunucuda klonladığınız daldan ayrılmadığınızı bildirir.
Şimdilik bu dal (branch) her zaman varsayılan olan ``master'' yani "ana dal"dır. Bunda endişelenmenizi gerektirecek bir durum yoktur.
<<ch03-git-branching#ch03-git-branching>> ünitesinde dalları ve referansları ayrıntılı olarak göreceksiniz.

Diyelim ki projenize yeni bir dosya, basit bir `README` (BENİ OKU) dosyası eklediniz.
Dosya daha önce mevcut değilse ve `git status` komutunu çalıştırırsanız izlenmeyen dosyanızı şu şekilde görürsünüz:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
   (use "git add <file>..." to include in what will be committed)

    README

Henüz "commit" edilmek üzere hiçbir şey eklenmedi fakat izlenmeyen (untracked) yeni bir dosya var. (bu dosyayı izlemek için "git add" komutu kullanın)
----

Yeni `README` dosyanızın izlenmediğini görebilirsiniz çünkü durum çıktınızda (git status) ``Untracked files'' (İzlenmeyen dosyalar) başlığı altındadır.
İzlenmeyen temel olarak Git'in önceki anlık görüntüde sahip olmadığınız bir dosyayı gördüğü anlamına gelir. Git, siz bunu yapmasını "git commit" komutuyla açıkça söyleyene kadar bunu "commit" görüntülerinize dahil etmeyecektir.
Böyle yapmasının sebebi, sizi yanlışlıkla oluşturulan ikili dosyaları veya eklemek istemediğiniz diğer dosyaların gereksiz kalabalığından ve kafa karışıklığından korumak istemesidir.
`README`yi dahil etmeye başlamak istiyorsanız, o halde dosyayı izlemeye başlayalım.

[[_tracking_files]]
==== Yeni Dosyaları İzleme

Yeni bir dosyayı izlemeye başlamak için `git add` komutu kullanılır.(((git commands, add)))
`README` dosyasını izlemeye başlamak için şu komutu çalıştırabilirsiniz:

[source,console]
----
$ git add README
----

Durum komutunuzu (git status) tekrar çalıştırırsanız, `README` dosyanızın artık izlendiğini (tracked) ve kaydedilmek üzere hazırlandığını (Staging) görebilirsiniz:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

``Changes to be committed`` başlığı altında yer aldığından "stage" aşamasında olduğunu anlayabilirsiniz.
Bu noktada "commit" yaparsanız, dosyanın `git add`i çalıştırdığınız andaki sürümü, "commit" geçmişinize yeni bir "commit" olarak işlenecektir.
Daha önce `git init` komutunu çalıştırdığınızda, hemen ardından `git add <files>` komutunu çalıştırdınız; bunun amacı dizininizdeki dosyaları izlemeye başlamaktı.(((git commands, init)))(((git commands, add)))
`git add` komutu, bir dosya veya dizin için bir yol adı alır; eğer bu bir dizinse, ilgili dizin ve alt dizinlerindeki tüm dosyaları "stage"e ekler.

==== Değiştirilmiş Dosyaları "stage"e alma

Şimdi izlenmekte (tracked) olan bir dosyayı değiştirelim.
Eğer izlenmnekte olan `CONTRIBUTING.md` adlı dosyayı değiştirir ve ardından `git status` komutunu tekrar çalıştırırsanız, şöyle bir sonuç elde edersiniz:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

`CONTRIBUTING.md` dosyası, ``Changes not staged for commit`` adlı bir bölümün altında görünür. Bu, izlenen bir dosyanın çalışma dizininde değiştirildiği ancak henüz "stage"e alınmadığı anlamına gelir.
"stage"e almak için `git add` komutunu çalıştırmalısınız.
`git add` çok amaçlı bir komuttur: yeni dosyaları izlemeye başlamak, dosyaları "stage"e almak (commit için hazırlamak) ve birleştirme sonucunda çakışan dosyaları (merge conflict) çözümlenmiş olarak işaretlemek gibi diğer şeyleri yapmak için de kullanırsınız.
Bunu, "bu dosyayı projeye ekle" yerine "bu içeriği bir sonraki işleme ekle" olarak düşünmek daha faydalı olabilir.(((git commands, add)))
Şimdi `CONTRIBUTING.md` dosyasını "stage"e almak için `git add` komutunu çalıştıralım ve ardından `git status` komutunu bir kez daha çalıştıralım:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Her iki dosya da "stage"dedir ve bir sonraki işleminize aktarılacaktır.
Bu noktada, varsayalım ki `CONTRIBUTING.md`de yapmak istediğiniz küçük bir değişikliği hatırladınız.
Dosyayı tekrar açar ve bu değişikliği yaparsınız, artık değişikliğinizi "commit" etmeye hazırsınız.
Şimdi `git status` komutunu bir kez daha çalıştıralım:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Bu da ne?
Artık `CONTRIBUTING.md` hem "staged" hem de "unstaged" olarak listelenmiş.
Bu nasıl olabilir?
Git'in bir dosyayı tam olarak `git add` komutunu çalıştırdığınız anda olduğu gibi "stage"e aktardığını görüyorsunuz.
Eğer şimdi `git commit` komutunu çalıştırırsanız, `CONTRIBUTING.md`nin çalışma dizininizde göründüğü şekliyle değil de `git add` komutunu en son çalıştırdığınız andaki versiyonu kayıt işlemine girecektir.
`git add`i çalıştırdıktan sonra bir dosyayı değiştirirseniz, dosyanın en son sürümünü hazırlamak için `git add`i tekrar çalıştırmanız gerekir:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== Kısa Durum (Status) Bilgisi

`git status` çıktısı oldukça kapsamlı ve aynı zamanda da uzundur.
Git'te ayrıca kısa bir durum bayrağı bulunur, böylece değişikliklerinizi daha derli toplu bir şekilde görebilirsiniz.
Eğer `git status -s` veya `git status --short` komutunu çalıştırırsanız, çok daha basitleştirilmiş bir çıktı elde edersiniz:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

İzlenmeyen yeni dosyaların yanında `??`, "stage" alanına eklenen yeni dosyaların yanında `A` (added), değiştirilen dosyaların yanında ise `M` (modified) bulunur.
Çıktıda iki sütun vardır; soldaki sütun "stage" alanının durumunu, sağdaki sütun ise çalışma ağacının (working tree) durumunu gösterir.
Örneğin bu çıktıda, `README` dosyası çalışma dizininde değiştirilmiş ancak henüz "stage"e alınmamıştır. `lib/simplegit.rb` dosyası ise değiştirilmiş ve "stage"e alınmıştır.
`Rakefile` değiştirildi (modified), hazırlandı (stage'e alındı) ve tekrar değiştirildi, dolayısıyla üzerinde hem "staged" hem de "unstaged" değişiklikler var.

[[_ignoring]]
==== Dosyaları Yoksayma (Ignore)

Sıklıkla Git'in otomatik olarak eklemesini veya izlemesini istemediğiniz bazı dosyalara sahip olursunuz.
Bunlar genellikle kayıt dosyaları gibi derleme sisteminiz tarafından otomatik olarak oluşturulan dosyalardır.
Bu gibi durumlarda, bunlarla eşleşecek şekilde `.gitignore` adlı bir dosya listeleme modeli oluşturabilirsiniz.(((ignoring files)))
Örnek bir `.gitignore` dosyası:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

İlk satır Git'e, çalıştırdığınız kodun bir yan çıktısı olabileceği için, uzantısı ``.o`` veya ``.a`` ile biten (object ve archive) tüm dosyaları yoksaymasını söyler.
İkinci satır Git'e, adları tilde (`~`) ile biten tüm dosyaları yok saymasını söyler; bu, Emacs gibi birçok metin düzenleyicisi tarafından geçici dosyaları işaretlemek için kullanılır.
Ayrıca otomatik olarak oluşturulan log (kayıt), tmp (geçici) veya pid (işlem kimliği) vb dizinleri de ekleyebilirsiniz.
Başlamadan önce yeni reponuz için bir `.gitignore` dosyası oluşturmak genellikle iyi bir fikirdir. Böylece Git reponuzda görmek istemediğiniz dosyaları yanlışlıkla "commit" etmezsiniz.

`.gitignore` dosyasını yazarken göz önünde bulundurmanız gereken kurallar aşağıdaki gibidir:

* Boş satırlar veya `#` ile başlayan satırlar dikkate alınmaz.
* Standart glob desenleri işler. Yani yazdığınız kural çalışma ağacınızdaki tüm dosyalar için alt dizinleri de dahil olmak üzere geçerlidir.
* Bu alt dizinlere inen yinelemeyi önlemek için dosya dizinine eğik çizgi (`/`) ile başlayabilirsiniz.
* Kuralın geçerli olmasını istediğimiz sadece belli bir dizini belirtmek için dosya dizinini eğik çizgiyle (`/`) sonlandırabilirsiniz.
* Kuralın uygulanmasını istemediğiniz bir modeli ünlem işaretiyle (`!`) başlatarak reddedebilirsiniz.

Glob desenleri, "shell"in kullandığı "RegEx" ifadelerine benzer:
Yıldız işareti (`*`) sıfır veya daha fazla karakterle eşleşir,
`[abc]` parantez içindeki herhangi bir karakterle eşleşir (bu örnekte a, b veya c),
Soru işareti (`?`) tek bir karakterle eşleşir,
Ve kısa çizgiyle (`[0-9]`) ayrılmış karakterleri çevreleyen parantezler bu aralıkta yer alan herhangi bir karakterle (bu örnekte 0'dan 9'a kadar rakamlarla) eşleşir,
İç içe geçmiş dizinleri eşleştirmek için iki yıldız işareti de kullanabilirsiniz; `a/**/z` ifadesi, `a/z`, `a/b/z`, `a/b/c/z`, vb. ile eşleşir.

İşte size örnek bir `.gitignore` dosyası:

[source]
----
# .a uzantılı tüm dosyaları yoksay
*.a

# b.a uzantılı tüm dosyaları yoksaysan da, lib.a dosyası bu kuralın istisnasıdır. lib.a dosyasındaki değişiklikleri izle
!lib.a

# Sadece bu dizindeki TODO dosyasını yoksay. Diğer dizinlerdeki TODO dosyalarını değil. (ör: subdir/TODO)
/TODO

# build dizinindeki ve onun alt dizinlrindeki tüm dosyaları yoksay
build/

# doc/notes.txt dosyasını yoksay ama doc/server/arch.txt dosyasını değil
doc/*.txt

# doc/ klasörü ve alt klasörlerinde yer alan tüm .pdf dosyalarını yoksay 
doc/**/*.pdf
----

[İPUCU]
====
Eğer projeniz için bir başlangıç noktasına ihtiyaç duyuyorsanız GitHub, https://github.com/github/gitignore adresinde pekçok farklı proje ve dilde ".gitignore" dosya örneklerinin kapsamlı bir listesini tutmaktadır.
====

[NOT]
====
Basit projelerde, bir proje kök dizininde tüm alt dizinler için geçerli olmak üzere tek bir ".gitignore" dosyası bulunur. 
Yine de alt dizinlerde ek `.gitignore` dosyalarının bulunması da mümkündür.
Bu iç içe geçmiş `.gitignore` dosyalarındaki kurallar yalnızca bulundukları dizinin alt klasörlerinde bulunan dosyalar için geçerlidir.
(Örneğin Linux çekirdeği kaynak reposunda 206 adet `.gitignore` dosyası bulunmaktadır.)

Birden fazla ".gitignore" dosyası bulunduğu durumlar bu kitabın kapsamı dışındadır. Bu konuda daha detaylı bilgiye konsol ekranınıza  "man gitignore" komutu yazarak ulaşabilirsiniz.
====

[[_git_diff_staged]]
==== "Staged" ve "Unstaged" Değişiklikleri Görme

`git status` komutu sizin için yeterince bilgi içermiyorsa (sadece hangi dosyaların değiştirildiğini değil, tam olarak neyi değiştirdiğinizi de bilmek istiyorsanız), bunun yerine `git diff` komutunu kullanabilirsiniz.(((git commands, diff)))
`git diff`i daha sonra daha ayrıntılı olarak ele alacağız, ancak muhtemelen onu en çok şu iki soruya cevap bulmak için ihtiyaç duyacaksınız: Neyi değiştirdiniz ama henüz "stage"e almadınız?
Neyi "stage"e aldınız fakat henüz "commit" etmediniz?
Her ne kadar `git status` bu soruları genel olarak dosya adlarını listeleyerek cevaplasa da, `git diff` size eklenen ve kaldırılan satırları değiştirilen her bir kod parçasıyla birlikte detaylıca gösterir.

Diyelim ki `README` dosyasını tekrar değiştirip "stage"e alıyorsunuz ve ardından `CONTRIBUTING.md` dosyasını "stage"e almadan düzenliyorsunuz.
`git status` komutunuzu çalıştırırsanız bir kez daha şöyle bir şey görürsünüz:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Neyi değiştirdiğinizi ancak henüz "stage"e almadığınızı görmek için herhangi bir argüman kullanmadan `git diff' yazın:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

Bu komut, çalışma dizininizdeki güncel kodu, "stage" alanınızdaki kodla karşılaştırır.
Sonuç size, henüz gerçekleştirmediğiniz değişiklikleri görme imkanı tanır.

Eğer bir sonraki "commit" işleminizde nelerin kaydedileceğini görmek istiyorsanız "git diff --staged" komutunu kullanabilirsiniz.
Bu komut, "stage" deki değişikliklerinizi, en son "commit" ettiğiniz kodla karşılaştırır:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

`git diff` komutunun son "commit" işleminizden bu yana yapılan tüm değişiklikleri göstermediğini, yalnızca henüz "stage"e alınmamış değişiklikleri gösterdiğini aklınızdan çıkarmayın.
Eğer tüm değişikliklerinizi "stage"e aldıysanız, `git diff` size hiçbir çıktı vermeyecektir.

Bir başka örnek olarak, `CONTRIBUTING.md` dosyasını "stage"e alır ve ardından yeniden düzenlerseniz, dosyadaki "staged" ve "unstaged" değişiklikleri görmek için `git diff` komutunu kullanabilirsiniz.
Ortamımız şöyle görünüyorsa:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Artık neyin "unstaged" olduğunu görmek için '`git diff` komutunu kullanabilirsiniz:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

veya şu ana kadar neleri "stage"e aldığınızı görmek için `git diff --cached` (`--staged` ve `--cached` eşanlamlıdır) komutunu kullanabilirsiniz:

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOT]
Harici bir Araç Olarak .Git Diff
====
Kitabın geri kalanında `git diff` komutunu çeşitli şekillerde kullanmaya devam edeceğiz.
Çalışma ortamı ve repodaki kodlar arasındaki farkları görmek için konsol ekranı yerine grafiksel veya harici bir arayüz programını tercih ederseniz, bu farklılıklara bakmanın başka bir yolu daha vardır.
Eğer `git diff` yerine `git difftool` komutu çalıştırırsanız, bu farklardan herhangi birini "emerge", "vimdiff" ve daha birçok farklı yazılımda (ticari yazılımlar dahil) görüntüleyebilirsiniz.
Sisteminizde hangilerinin mevcut olduğunu görmek için `git difftool --tool-help` komutunu çalıştırabilirsiniz.
====

[[_committing_changes]]
==== Committing Your Changes

Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged -- any files you have created or modified that you haven't run `git add` on since you edited them -- won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

Doing so launches your editor of choice.
(This is set by your shell's `EDITOR` environment variable -- usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<ch01-introduction#ch01-introduction>>).(((editor, changing default)))(((git commands, config)))

The editor displays the following text (this example is a Vim screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

Alternatively, you can type your commit message inline with the `commit` command by specifying it after a `-m` flag, like this:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you don't have to run `git add` on the `CONTRIBUTING.md` file in this case before you commit.
That's because the `-a` flag includes all changed files.
This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.

[[_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changes not staged for commit'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file or had already added it to the staging area, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as:

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files whose names end with a `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact -- we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like:

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `git mv` is one command instead of three -- it's a convenience function.
More importantly, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
