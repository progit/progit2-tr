[[_remote_repos]]
=== Uzak Repo ile Çalışmak

Herhangi bir Git projesinde işbirliği yapabilmek için uzak depolarınızı nasıl yöneteceğinizi bilmeniz gerekir.
Uzak depolar, projenizin İnternette veya ağda bir yerde barındırılan sürümleridir.
Bunlardan birkaçına sahip olabilirsiniz; bunların her biri genellikle sizin için salt okunurdur veya okuma/yazmadır.
Başkalarıyla işbirliği yapmak, bu uzak depoları yönetmeyi ve işlerinizi paylaşmanız gerektiğinde verileri bu havuzlara gönderip almayı içerir.
Uzak depoların yönetilmesi, uzak depoların nasıl ekleneceğini, artık geçerli olmayan uzaktan kumandaların nasıl kaldırılacağını, çeşitli uzak dalların nasıl yönetileceğini ve bunların izlenip izlenmediğini nasıl tanımlayacağınızı ve daha fazlasını bilmeyi içerir.
Bu bölümde bu uzaktan yönetim becerilerinden bazılarını ele alacağız.

[NOT]
.Uzak depolar yerel makinenizde olabilir.
====
Aslında sizinle aynı ana bilgisayar üzerinde olan bir ``uzak`` repoyla çalışıyor olmanız tamamen mümkündür.
'Uzak' kelimesi, veri deposunun ağda veya internette başka bir yerde olduğu anlamına gelmez, yalnızca başka bir yerde olduğu anlamına gelir.
Böyle bir uzak repoyla çalışmak, diğer uzaktan server'larda olduğu gibi yine de tüm standart push (kod gönderme), pull (kod çekme) ve fetch (kavrama) işlemlerini içerecektir.
====

==== Uzak Sunucuları Görme

Hangi uzak sunucuları yapılandırdığınızı görmek için `git remote` komutunu çalıştırabilirsiniz.(((git commands, remote)))
Bu belirttiğiniz her uzak tanıtıcının kısa adlarını listeler.
Reponuzu klonladıysanız en azından `Origin`i görmelisiniz; Git'in klonladığınız sunucuya verdiği varsayılan isim budur:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Ayrıca Git'in o uzak sunucuya okuma ve yazma sırasında kullanılacak kısa ad için sakladığı URL'leri gösteren `-v` bayrağını da belirtebilirsiniz:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Birden fazla uzak sunucunuz varsa, bu komut hepsini listeler.
Örneğin, birden fazla geliştiricinin beraber çalışmak için oluşturduğu birden fazla uzak sunucuya sahip bir repo şöyle görünebilir.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Bu, diğer geliştiricilerden kolaylıkla katkı alabileceğimiz anlamına gelir.
Ayrıca bunlardan bir veya daha fazlasını zorlama iznimiz olabilir, ancak bunu buradan söylemek mümkün değil.

Bu uzak sunucuların çeşitli protokoller kullandığına dikkat edin; Bu konu hakkında daha fazla bilgiyi <<ch04-git-on-the-server#_getting_git_on_a_server>> bölümünde ele alacağız.

==== Uzak Sunucuları Görme

`git clone` komutunun sizin için 'Origin' uzak sunucusunu nasıl eklediğinden üstü kapalı bahsettik ve bazı gösterimler verdik.
Yeni bir uzak sunucunun nasıl ekleneceği aşağıda daha açıkça anlatılmıştır.(((git commands, remote)))
Kısa adını kullanarak yeni bir uzak Git reposu eklemek için `git remote add <shortname> <url>` komutunu çalıştırın:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Artık komut satırında URL'nin tamamı yerine `pb` dizesini kullanabilirsiniz.
Örneğin, Paul'un sahip olduğu ancak henüz sizin reponuzda bulunmayan tüm kodları getirmek istiyorsanız, `git fetch pb` komutunu çalıştırabilirsiniz:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Paul'un ana-dalına (master branch) artık yerelde `pb/master` olarak erişilebilmektedir. Onu kendi dallarınızdan biriyle birleştirebilirsiniz veya incelemek isterseniz herhangi bir dala geçerek göz atabilirsiniz.
(Dalların ne olduğunu ve bunların nasıl kullanılacağını <<ch03-git-branching#ch03-git-branching>> bölümünde çok daha ayrıntılı olarak ele alacağız.)

[[_fetching_and_pulling]]
==== Uzak Sunucudan Yakalama ve Getirme

Az önce gördüğünüz gibi uzak projelerinizden veri almak için aşağıdaki komutu çalıştırabilirsiniz.:(((git commands, fetch)))

[source,console]
----
$ git fetch <remote>
----

Komut o uzak projeye gider ve o uzak projeden henüz sahip olmadığınız tüm verileri çeker.
Bunu yaptığınız takdirde o uzak sunucudaki tüm dallara erişim için gerekli referanslara sahip olacaksınız. Böylece istediğiniz zaman kodları inceleyebilir veya kendi kodunuzla birleştirebilirsiniz.

Eğer bir repoyu klonlarsanız, komut o uzak repoyu otomatik olarak ``Origin`` adı altına ekler.
Yani, `git fetch origin`, klonlamanızdan (veya sunucudan son getirmenizden) bu yana sunucuya gönderilen tüm yeni çalışmaları getirir.
Git fetch komutunun verileri yalnızca yerel reponuza indirdiğini unutmamalısınız. Verileri herhangi bir çalışmanızla otomatik olarak birleştirmez veya üzerinde çalışmakta olduğunuz kodu değiştirmez.
Hazır olduğunuzda bunu manuel olarak kendi kodunuzla birleştirmeniz gerekir.

Geçerli dalınız uzak bir dalı izleyecek şekilde ayarlanmışsa (daha fazla bilgi için sonraki bölüme ve <<ch03-git-branching#ch03-git-branching>>'e bakın), otomatik olarak getirmek için `git pull` komutunu kullanabilirsiniz. Daha sonra bu uzak dalı mevcut dalınızla birleştirin.(((git commands, pull)))
Bu size daha kolay veya daha rahat bir iş akışı sağlar. Varsayılan olarak `git clone` komutu, yerel ana dalınızı (genellikle main veya master olarak adlandırılır), klonladığınız uzak sunucudaki uzak ana dalı (veya varsayılan dalın adı her neyse) izleyecek şekilde otomatik olarak ayarlar.
`git pull` komutunu çalıştırmak genellikle verileri orijinal olarak klonladığınız sunucudan getirir ve otomatik olarak bu verileri üzerinde çalışmakta olduğunuz kodla birleştirmeye çalışır.

[[_pushing_remotes]]
==== Kodlarınızı Uzak Sunucuya Göndermek (push etmek)

Projeniz belli bir aşamaya ulaştıktan sonra paylaşmak isteyebilirsiniz. Bunun için geliştirilmiş kodunuzu uzak repoya göndermeniz (push etmek) gerekmektedir.
Bunun için kullanmanız gereken komut basittir: `git Push <remote> <branch>`.(((git commands, push)))
Ana dalınızı "Origin" sunucunuza göndermek istiyorsanız (yine klonlama genellikle bu adların her ikisini de sizin için otomatik olarak ayarlar), o zaman yaptığınız "commitleri sunucuya geri göndermek için şunu çalıştırabilirsiniz:

[source,console]
----
$ git push origin master
----

Bu komut yalnızca yazma erişiminizin olduğu bir sunucudan klonlama yapmışsanız ve bu arada hiç kimse başka bir "push" yapmamışsa çalışır.
Siz ve başkaları projeyi aynı anda klonlarsanız ve diğerleri sizden önce geliştirilmiş kodlarını uzak sunucuya gönderirse, doğal olarak sizin gönderiminiz (push) reddedilecektir.
Değiştirilmiş kodunuzu göndermenize (push) izin verilmeden önce, diğerleri tarafından güncellenmiş kodları uzak repodan getirmeniz (pull) ve kendi işinize dahil etmeniz gerekecek.
Güncel çalışmanızı uzak sunuculara nasıl gönderebileceğiniz hakkında daha ayrıntılı bilgi için <<ch03-git-branching#ch03-git-branching>> konusuna bakın.

[[_inspecting_remote]]
==== Uzak Sunucunun İncelenmesi

Belirli bir uzak sunucu hakkında daha fazla bilgi görmek istiyorsanız git remote show <remote>` komutunu kullanabilirsiniz.(((git commands, remote)))
Bu komutu `origin` gibi belirli bir kısa adla çalıştırırsanız şöyle bir sonuç elde edersiniz:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Bu komut uzak repo URL'si yanında izlenen dal bilgilerini de listeler.
Bununla birlikte size, eğer ana daldaysanız (main veya master) ve `git pull` çalıştırırsanız, tüm uzak referansları getirdikten sonra otomatik olarak uzak repodaki ana dalla birleşeceğini (merge) söyler.
Ayrıca indirdiği (pull) tüm uzak referansları da listeler.

Bu karşılaşacağınız basit bir örnektir.
Ancak Git'i daha yoğun kullandığınızda, `git remote show` komutuyla çok daha fazla bilgi görebilirsiniz:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Bu komut, belirli bir daldaken `git Push` komutunu çalıştırdığınızda otomatik olarak hangi dalın uzak repoya aktarılacağını gösterir.
Ayrıca, sunucudaki hangi uzak dallara henüz sahip olmadığınızı; yerelde sahip olduğunuz hangi dalların uzak sunucudan kaldırılmış olduğunu ve `git pull` çalıştırdığınızda otomatik olarak uzak-izleme dallarıyla birleşecek (merge) çoklu yerel dallarınızı da gösterir.

==== Uzak Sunucuları Yeniden Adlandırma ve Kaldırma

Bir uzaktan sunucunun kısa adını değiştirmek için `git remote rename` komutunu çalıştırabilirsiniz.(((git commands, remote)))
Örneğin `pb`yi `paul` olarak yeniden adlandırmak istiyorsanız, bunu `git remote rename` komutu ile yapabilirsiniz:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Bunun tüm uzaktan izleme dal adlarınızı değiştirdiğini belirtmekte fayda var.
Önceden `pb/master` olarak adlandırılan (referance) uzak sunucunun yeni adı artık `paul/master`dır.

Herhangi bir nedenden dolayı uzak sunucuyu kaldırmak isterseniz (ör: sunucuyu taşımışsanız veya artık belirli bir aynayı -mirror: bir repodaki tüm verileri ve geçmişi eksiksiz olarak başka bir drepoya kopyalayan bir repo- kullanmıyorsanız veya geliştiricilerden biri artık projeye katkıda bulunmuyorsa) `git remote remove` veya `git remote rm` komutlarından birini kullanabilirsiniz:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----

Bir uzaktan sunucunun referansını bu şekilde sildiğinizde, o sunucuyla ilişkili tüm uzaktan izleme dalları ve yapılandırma ayarları da silinir.
