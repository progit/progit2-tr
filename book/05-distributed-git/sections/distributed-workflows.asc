=== Dağıtılmış İş Akışları

(((iş akışları)))
Merkezi Sürüm Denetleme Sistemlerinden (CVCS) farklı olarak, Git'in dağınık haldeki yapısı, geliştiricilerin projeler üzerinde nasıl işbirliği yapacakları konusunda daha fazla esnek olmalarını sağlar.
Merkezi sistemlerde, her geliştirici merkezi bir hub üzerinde az veya fazla eşit çalışan bir düğüm halindedir.
Ama yine de, Git içerisinde her geliştirici hem bir düğüm hem de bir hub olarak bulunabilir - yani, her geliştirici kodun diğer depolara katkıda bulunabilmesine ve aynı zamanda başkalarının çalışmalarını temel almakla birlikte katkıda da bulunabileceği bir ortak depoyu sürdürebilmelidir.
Bu, projeniz yada ekibinize yönelik geniş iş akışı fırsatları sağlar, bu nedenle bu esnekliğin avantajlarından yararlanan birkaç genel paradigmayı inceleyeceğiz.
Her bir tasarımın güçlü ve zayıf yanlarını görerek; bunları kullanma amacıyla tek bir tanesini seçebilir yada her bir özelliği karıştırıp eşleştirebilirsiniz.

==== Merkezi İş Akışı

(((iş akışları, merkezileştirilmiş)))
Merkezi sistemlerde, çoğunlukla merkezi bir iş akışı olan tek bir işbirliği modeli bulunur. 
Merkezi bir Hub veya bir depo, kodu kabul edebilir ve herkes çalışmalarını onunla senktronize hale getirir.
Bazı geliştiriciler – ki aynı zamanda bu hub'ın tüketicileridirler – düğüm halindedir ve bunu bir yere senkronize hale getirebilirler.

.Centralized workflow.
image::images/centralized.png[Centralized workflow.]

Bu, eğer iki geliştirici de merkezden kopyalama işlemi yapar ve üzerinde değişiklik uygularlarsa, değişiklikleri tekrar başlatmak için ilk geliştiricinin hiç sorun yaşamadan bunu yapabileceği anlamına gelmektedir.
İkinci geliştirici, ilk geliştiricinin yaptığı değişikliklerin üzerine yazmaktan kaçınmak için, değişiklikleri yukarıya göndermeden önce birincinin işinde birleşmelidir.
Bu tanım, Git'de tıpkı Subversion'da (((Subversion)) olduğu gibi doğru haldedir (veya herhangi bir CVCS) ve model Git üzerinde harika bir biçimde çalışır.

Eğer şirketinizde veya ekibinizde hazır haldeki merkezi bir iş akışından zaten memnunsanız, bu iş akışını Git ile birlikte yürütecek şekilde kolayca kullanmaya devam edebilirsiniz.
Basit bir şekilde, tek bir depo kurun ve herkese takımınızı yürütme erişimi sağlayın; Git, kullanıcıların birbirlerinin üzerine yazmasına izin vermez.
John ve Jessica'nın çalışmaya aynı zamanda başladıklarını söyleyin. 
John yaptığı değişikliği bitirir ve bunları sunucuya gönderir.  
Hemen ardından, Jessica değişikliklerini zorlamaya çalışsa da, sunucu bunu reddedecektir. 
Çünkü bunun sebebi olarak ona, ileriye dönük hızlı olmayan değişiklikleri zorlamaya çalıştığı ve onu alıp birleştirene kadar bunu yapamayacağı söylendi.                     
Bu iş akışı birçok insanın ilgisini çekebilir çünkü birçok insanın aşina olduğu rahat bir paradigmadır.

Bu aynı zamanda, yalnızca küçük takımlarla sınırlı değildir. Git'in dallanma modeli sayesinde, yüzlerce geliştiricinin aynı anda düzinelerce şube aracılığıyla tek bir proje üzerinde başarılı bir şekilde çalışması da mümkün hale gelmektedir.

[[_integration_manager]]
==== Entegrasyon-Yönetici İş Akışı                             

(((iş akışları, entegrasyon yöneticisi)))
Git, birden fazla sayıda uzak havuza sahip olmanıza izin verdiği için, her bir geliştiricinin kendi genel havuzuna yazma erişimine sahip olması ve diğerlerininkileri de okuma erişimine sahip olması mümkündür.
Bu senaryo çoğunlukla "resmi" projeyi temsil eden kanuni bir depodan oluşur.
Bu projeye katkı sağlamak için, projenizin kendine ait olan bir ortak klon oluşturmalı ve yaptığınız değişiklikleri ona uygularsınız.
Bundan sonra, ana projenin bakımcısına değişikliklerinizi çekmek için bir talepte bulunabilirsiniz.
Hemen ardından bakım yapan kişi deponuzu uzaktan bir kumanda olarak ekleyebilir, yapmış olduğunuz değişiklikleri yerel olarak test edebilir, onları ait oldukları şubeleriyle birleştirebilir ve depolarına geri gönderebilir.
Bu süreç, şu şekilde çalışır (bkz. <<wfdiag_b>>):

1. Proje yöneticisi kamuya açık olan depolarını yürütür.
2. Bir katkıda bulunan, bu depoyu klonlar ve üzerinde değişiklikler yapar.
3. Katkıda bulunan kişi kendi kopyasını yürütür.
4. Katılımcı, bakım yapan kişiye yaptığı değişiklikleri uygulamasını talep eden bir e-posta gönderir.
5. Bakımı yapan kişi, katkıda bulunanın repo'sunu uzaktan kumanda olarak ekler ve yerel biçimde birleştirir.
6. Bakım yapan kişi, birleştirilmiş olan bu değişikleri ana depoda uygular.

[[wfdiag_b]]								   
.Integration-manager workflow. 		      
image::images/integration-manager.png[Integration-manager workflow.]

(((çatallama)))
Bu, GitHub veya GitLab gibi hub tabanlı araçlar için çok yaygın olarak kullanılan bir iş akışı olup, burada bir projeyi çatallamak yaptığınız değişiklikleri herkesin görebileceği bu çatalınıza sürüklemek oldukça kolaydır.
Bu yaklaşımın en büyük faydalarından biri, çalışmaya devam edebilmeniz ve ana deponun sürdürücüsü olarak ne zaman isterseniz değişiklikleri çekebilmenizdir.
Katkıda bulunanların yapmış olduğu değişiklikleri projeye dahil etmelerini beklemek zorunda değilsiniz – bu yaklaşımla her parti kendi hızında çalışabiliyor.

==== Diktatör ve Teğmen İş Akışı

(((iş akışları, diktatör ve teğmenler)))
Bu, çoklu depoya ait iş akışının bir değişkeni halindedir.
Genellikle yüzlerce ortak çalışanı olan büyük projeler tarafından kullanılır; Ünlü bir örnek Linux çekirdeği örnek gösterilebilir.
Deponun belirli bölümlerinden çeşitli entegrasyon yöneticileri sorumludur; ve bunlar teğmen olarak adlandırılırlar.
Teğmenlerin hepsi yardımsever diktatör olarak tanımlanan bir entegrasyon yöneticisine bağlıdırlar.
Yardımsever diktatörün kullandığı deposu, tüm ortak çalışanların çekmesi gereken referans havuzu olarak da düşünülebilir.
Bu süreç, şu şekilde çalışır (bkz. <<wfdiag_c>>):

1. Düzenli geliştiriciler kendilerine ait bir konu üzerinde çalışırlar ve çalışmalarını "master" üzerine yapıştırırlar.    
   "master" olarak adlandırılan bu kısım, diktatörün bir dalıdır.
2. Teğmen geliştiricilerine ait konu dallarını "master" dalına entegre ederek birleştirr.
3. Diktatör, teğmenlerin oluşturduğu bu "master" dallarını kendine ait "master" dalı ile birleştirir.
4. Diktatör, diğer geliştiriciler üzerinde tekrar edebilsinler diye oluşturmuş olduğu ‘master’ı referans deposu üzerine uygular.

[[wfdiag_c]]								      
.Benevolent dictator workflow. 			   
image::images/benevolent-dictator.png[Benevolent dictator workflow.]

Bu türdeki bir iş akışı aslında çok yaygın olarak kullanılmamaktadır, ancak çok büyük projelerde veya hiyerarşik ortamlarda yararlı olabilir.
Proje liderinin (yani diktatör), çalışmaların çoğunu devretmesine ve entegre etmeden önce çok sayıda kod alt bölümünü farklı noktalarda bir araya getirmesine olanak sağlar.

==== İş akışlarının genel özeti

Bunlar, temelde, Git gibi dağıtılmış haldeki bir sistemle mümkün olan ve yaygın olarak kullanılabilecek iş akışlarıdır, ancak belirli gerçek dünya iş akışınıza uyması için birçok farklı türde iş akışının bulunduğunu da unutmayın.
Hangi iş akışı kombinasyonunun sizin için uygun olabileceğini anladığınıza göre (umarım), farklı akışları oluşturan başlıca rollerin nasıl gerçekleştirilebileceğine dair daha spesifik örneklerin üstünü kapayabiliriz.
Bir sonraki bölümde, bir projeye katkıda bulunmak için birkaç yaygın kalıp hakkında bilgi edineceksiniz.
